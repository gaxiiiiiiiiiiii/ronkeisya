●導入
  二章で述べられたようのい、一階の述語論理で計算可能ではない。
  しかしながら、与えられた論理式が証明可能であるなら、証明可能と判断できるアルゴリズムは存在する。
    ー＞　証明可能でない場合の挙動は不明
  例えば、証明図をしらみつぶしに生成し、与えられた論理式の証明図となるものが生成されるまで続けるなど。
  しかしそれはあまりにも非効率。
  そこで、より効率的なアルゴリズムとして知られる導出原理と、その基礎となるエルブラウンの定理について学ぶ。


●定理2.1
  (14) ⊨ (∀x(B⊃C)) ⊃ ((∀xB)⊃(∀xC))
  (15) ⊨ (∀x(B⊃C)) ⊃ ((∃xB)⊃(∃xC))

●冠頭標準形
  Q₁,...,Qₙのそれぞれを量化子、Aを量化子が含まれない論理式とする時、
  Q₁x₁,...,QₙxₘA を冠頭論理式と呼ぶ

  ある論理式Aに対して、ある冠頭論理式A⁺が
    ⊨ A ≡ A⁺
  を満たす時、A⁺をAの冠頭標準形と呼ぶ

●定理2.2
  任意の論理式Aに対して、冠頭標準形が存在する

●定義3.1(存在冠標準形)
  冠頭標準形における量化子がすべて存在量化子であるものを、存在冠頭論理式とよぶ。

●定理3.2
  任意の論理式Aに対して、以下を満たす存在冠頭論理式A'が存在する。
    ⊨ A <=> ⊨ A'
  (!)冠頭標準形との違いに注意
      ⊨ A ≡ A⁺
        iff ⊨ ((A ⊃ A⁺) ∧ (A⁺ ⊃ A))
【証明】
  定理2.2より、冠頭標準形に対してA'が存在する事を示せば十分である。
  まずA'の候補を作り、それが条件を満たす事を証明する。

  以下の操作を再帰的に繰り返し、Aの全称量化子を消す。
  F(A)           := A 　　　　　                     (Aがそれ自身で存在冠頭論理式である時)
  F(∀yC)         := F(C[c/y])                      (新しく定数記号cを導入している)
  F(∃x₁...∃ₘ∀yC) := F(∃x₁...∃ₘ∀yC[f(x₁,...,xₘ)/y]) (新しくm変数関数記号fを導入している)

  ここで具体的に
    A = ∀x∃y∃z∀wP(x,y,z,w)
  として考えると、
    A' = ∃y∃zP(c,y,z,f(y,z))
  となる。

  以下、この具体例について証明をするが、一般の論理式の場合でも同様に証明できる。

  (=>)
  ⊨ A ⊃ A' を示せば十分である。
  明らかに、
    ⊨ ∀x∀y∀z(　(∀wP(x,y,z,w)) ⊃ P(x,y,z,f(y,z))　)
    (!) 後半の論理式は、前半の論理式のwに具体化にしたもの
  これに、定理2.1の(15)する事で、
    ⊨ ∀x( (∃y∃z∀wP(x,y,z,w)) ⊃ ∃y∃zP(x,y,z,f(y,z)) )
    （？）なんか怪しい。
      　　部分論理式に、恒真性が同値な論理式を代入しても恒真性が変わらない、
          みたいな定理を暗に使ってるのかとも思ったが、
          全称命題の部分論理式を考えるの、なんか一筋縄ではいかなそう。
        　つまり、任意の論理式A,Bに対して、
            (⊨ A[t/x] <-> ⊨ B[t'/x]) -> (⊨ ∀x,A <-> ⊨ ∀x,B)
          みたいな補題が必要そうだけど、部分論理式に代入する項が複数存在しうるから、
          証明すべき命題をどう書くべきかすらよく分からない。
  さらに、定理1.1.14を用いると、
    ⊨ (∀x∃y∃z∀wP(x,y,z,w)) ⊃ (∀x∃y∃zP(x,y,z,f(y,z))
  一方、
    ⊨ (∀x∃y∃zP(x,y,z,f(y,z))　⊃ (∃y∃zP(x,y,z,f(y,z))
  は自明。以上より、⊨ A ⊃ A'が示された。

  (<=)
  待遇を考える。
  ⊭ A と仮定すと、𝒰 ⊭ A となる構造𝒰= <U, I>が存在する。
  Aは閉じた論理式であるので、これは 𝒰 ⊨ ¬ A と同値である。
  これに、定理2.1の諸々を用いて
    𝒰 ⊨ ∃x∀y∀z∃w¬P(x,y,z,w)
  これは、あるu₁ ∈ U が存在し、任意のv₁,v₂ ∈ Uに対して、あるu₂ ∈ U が存在し、
    𝒰 ⊨ ¬ P (u₁,v₁,v₂,u₂)
  が成り立つ事を意味する。
    （！）二章における論理式の解釈
    （！）対象言語の論理とメタな論理での全称・存在量化子を区別するために、自然言語で記述してる。
  この時、u₂ の取り方は、v₁,v₂に依存するので、u₂ = u(v₁,v₂)と書く。
  ここで、𝒰の言語ℒにcとfを追加した言語について、以下のような　構造𝒰' = <U, J> 定義する
    cᴶ = u₁
    f(v₁,v₂) = u(v₁,v₂)
  すると、
    任意の v₁,v₂ ∈ U に対して 𝒰' ⊨ ¬ P(c,v₁,v₂,f(v₁,v₂))
  従って、
    𝒰' ⊨ ∀y∀z¬P(c,y,z,f(y,z))
    <-> 𝒰' ⊨ ¬ ∃y∃zP(c,y,z,f(y,z))
  つまり、
    𝒰' ⊭ A'
  以上より、A'が恒真でない事がわかる。
  （？）言語が拡張されてることが引っかかる。
      　恒真の定義が、
          言語ℒの論理式に対して、ℒ上の任意の構造𝒰に対して𝒰 ⊨ A
        だから、証明すべき命題
          ⊨ A <=> ⊨ A'
        についても、言語ℒが固定されている事を前提にしているのでは？
        このように言語を拡張しても問題ない事を示す必要がある？
        あるいは、拡張された言語をℒ'として、
          ℒ において ⊨ A => ℒ' において ⊨ A
        が言えそうだから、
          ℒ’ において ⊨ A <=> ⊨ A'
        を示した事になる。
        だとするならば、定理3.2はその事を明示的に言うべきでは？
        つまり、この証明は、
          任意の言語ℒの、任意の論理式Aに対して、
          言語ℒ'において ⊨ A <=> ⊨ A'
          となるℒと存在冠頭論理式A'が存在する
        を示した事になる？






●スコーレム標準形
  上述のように論理式Aから得られる論理式をスコーレム標準形とよび、Aˢと書く。

●系3.2
  任意の論理式Aに対して、
    ⊨ A <=> ⊨ Aˢ

  （＊）任意の論理式からスコーレム標準形を得る手続きは有限であるため、
    　　論理式が恒真であるかの判定問題は、スコーレ無標準形が恒真であるかの判定問題に帰着できる。